{"version":3,"file":"index.js","names":["callback: MutationCallback","noop","record: MutationRecord"],"sources":["../../../src/dom-external/mutation-observer/index.ts"],"sourcesContent":["import { noop } from '@tarojs/shared'\n\nimport { MutationObserverImpl, recordMutation } from './implements'\nimport { MutationRecord, MutationRecordType } from './record'\n\nimport type { TaroNode } from '../../dom/node'\nimport type { MutationCallback, MutationObserverInit } from './implements'\n\ndeclare const ENABLE_MUTATION_OBSERVER: boolean\n\nexport class MutationObserver {\n  core: Pick<MutationObserverImpl, 'observe' | 'disconnect' | 'takeRecords'>\n\n  constructor (callback: MutationCallback) {\n    if (ENABLE_MUTATION_OBSERVER) {\n      this.core = new MutationObserverImpl(callback)\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('[Taro Warning] 若要使用 MutationObserver，请在 Taro 编译配置中设置 \\'mini.runtime.enableMutationObserver: true\\'')\n      }\n      this.core = {\n        observe: noop,\n        disconnect: noop,\n        takeRecords: (noop as () => any)\n      }\n    }\n  }\n\n  public observe (...args: [TaroNode, MutationObserverInit?]) {\n    this.core.observe(...args)\n  }\n\n  public disconnect () {\n    this.core.disconnect()\n  }\n\n  public takeRecords () {\n    return this.core.takeRecords()\n  }\n\n  static record (record: MutationRecord) {\n    recordMutation(record)\n  }\n}\n\nexport {\n  MutationRecordType\n}\n"],"mappings":";;;;;;;AAUA,IAAa,mBAAb,MAA8B;CAC5B;CAEA,YAAaA,UAA4B;AACvC,MAAI,0BAA0B;AAC5B,QAAK,OAAO,IAAI,qBAAqB;EACtC,OAAM;AACL,OAAI,QAAQ,IAAI,aAAa,cAAc;AACzC,YAAQ,KAAK,mGAAqG;GACnH;AACD,QAAK,OAAO;IACV,SAASC;IACT,YAAYA;IACZ,aAAcA;GACf;EACF;CACF;CAED,AAAO,QAAS,GAAG,MAAyC;AAC1D,OAAK,KAAK,QAAQ,GAAG,KAAK;CAC3B;CAED,AAAO,aAAc;AACnB,OAAK,KAAK,YAAY;CACvB;CAED,AAAO,cAAe;AACpB,SAAO,KAAK,KAAK,aAAa;CAC/B;CAED,OAAO,OAAQC,QAAwB;AACrC,iBAAe,OAAO;CACvB;AACF"}