{"version":3,"file":"URL.js","names":["url: string","base?: string","#hash","#hostname","#pathname","#port","#protocol","#search","val: string","TaroURLProvider: typeof TaroURL","env","parsedBase: ReturnType<typeof parseUrl> | null"],"sources":["../../src/bom/URL.ts"],"sourcesContent":["import { isString, isUndefined } from '@tarojs/shared'\n\nimport env from '../env'\nimport { URLSearchParams } from './URLSearchParams'\n\nclass TaroURL {\n  static createObjectURL () {\n    throw new Error('Oops, not support URL.createObjectURL() in miniprogram.')\n  }\n\n  static revokeObjectURL () {\n    throw new Error('Oops, not support URL.revokeObjectURL() in miniprogram.')\n  }\n\n  /* private property */\n  #hash = ''\n  #hostname = ''\n  #pathname = ''\n  #port = ''\n  #protocol = ''\n  #search: URLSearchParams\n\n  constructor (url: string, base?: string) {\n    if (!isString(url)) url = String(url)\n\n    const parseResult = parseUrlBase(url, base)\n    const { hash, hostname, pathname, port, protocol, search } = parseResult\n\n    this.#hash = hash\n    this.#hostname = hostname\n    this.#pathname = pathname || '/'\n    this.#port = port\n    this.#protocol = protocol\n    this.#search = new URLSearchParams(search)\n  }\n\n  /* public property */\n  get protocol () {\n    return this.#protocol\n  }\n\n  set protocol (val: string) {\n    isString(val) && (this.#protocol = val.trim())\n  }\n\n  get host () {\n    return this.hostname + (this.port ? ':' + this.port : '')\n  }\n\n  set host (val: string) {\n    if (val && isString(val)) {\n      val = val.trim()\n      const { hostname, port } = parseUrl(`//${val}`)\n      this.hostname = hostname\n      this.port = port\n    }\n  }\n\n  get hostname () {\n    return this.#hostname\n  }\n\n  set hostname (val: string) {\n    val && isString(val) && (this.#hostname = val.trim())\n  }\n\n  get port () {\n    return this.#port\n  }\n\n  set port (val: string) {\n    isString(val) && (this.#port = val.trim())\n  }\n\n  get pathname () {\n    return this.#pathname\n  }\n\n  set pathname (val: string) {\n    if (isString(val)) {\n      val = val.trim()\n      const HEAD_REG = /^(\\/|\\.\\/|\\.\\.\\/)/\n      let temp = val\n      while (HEAD_REG.test(temp)) {\n        temp = temp.replace(HEAD_REG, '')\n      }\n      if (temp) this.#pathname = '/' + temp\n      else this.#pathname = '/'\n    }\n  }\n\n  get search () {\n    const val = this.#search.toString()\n    return (val.length === 0 || val.startsWith('?')) ? val : `?${val}`\n  }\n\n  set search (val: string) {\n    if (isString(val)) {\n      val = val.trim()\n      this.#search = new URLSearchParams(val)\n    }\n  }\n\n  get hash () {\n    return this.#hash\n  }\n\n  set hash (val: string) {\n    if (isString(val)) {\n      val = val.trim()\n      if (val) this.#hash = val.startsWith('#') ? val : `#${val}`\n      else this.#hash = ''\n    }\n  }\n\n  get href () {\n    return `${this.protocol}//${this.host}${this.pathname}${this.search}${this.hash}`\n  }\n\n  set href (val: string) {\n    if (val && isString(val)) {\n      val = val.trim()\n      const { protocol, hostname, port, hash, search, pathname } = parseUrl(val)\n      this.protocol = protocol\n      this.hostname = hostname\n      this.pathname = pathname\n      this.port = port\n      this.hash = hash\n      this.search = search\n    }\n  }\n\n  get origin () {\n    return `${this.protocol}//${this.host}`\n  }\n\n  set origin (val: string) {\n    if (val && isString(val)) {\n      val = val.trim()\n      const { protocol, hostname, port } = parseUrl(val)\n      this.protocol = protocol\n      this.hostname = hostname\n      this.port = port\n    }\n  }\n\n  get searchParams () {\n    return this.#search\n  }\n\n  // public method\n  toString () {\n    return this.href\n  }\n\n  toJSON () {\n    return this.toString()\n  }\n\n  // convenient for deconstructor\n  _toRaw () {\n    return {\n      protocol: this.protocol,\n      port: this.port,\n      host: this.host,\n      hostname: this.hostname,\n      pathname: this.pathname,\n      hash: this.hash,\n      search: this.search,\n      origin: this.origin,\n      href: this.href,\n    }\n  }\n}\n\nexport type { TaroURL }\n\n// Note: 小程序端 vite 打包成 commonjs，const URL = xxx 会报错，所以把 URL 改为 TaroURLProvider\nexport const TaroURLProvider: typeof TaroURL = process.env.TARO_PLATFORM === 'web' ? env.window.URL : TaroURL\n\nexport function parseUrl (url = '') {\n  const result = {\n    href: '',\n    origin: '',\n    protocol: '',\n    hostname: '',\n    host: '',\n    port: '',\n    pathname: '',\n    search: '',\n    hash: ''\n  }\n  if (!url || !isString(url)) return result\n\n  url = url.trim()\n  const PATTERN = /^(([^:/?#]+):)?\\/\\/(([^/?#]+):(.+)@)?([^/?#:]*)(:(\\d+))?([^?#]*)(\\?([^#]*))?(#(.*))?/\n  const matches = url.match(PATTERN)\n\n  if (!matches) return result\n\n  // TODO: username & password ?\n  result.protocol = matches[1] || 'https:'\n  result.hostname = matches[6] || 'taro.com'\n  result.port = matches[8] || ''\n  result.pathname = matches[9] || '/'\n  result.search = matches[10] || ''\n  result.hash = matches[12] || ''\n  result.href = url\n  result.origin = result.protocol + '//' + result.hostname\n  result.host = result.hostname + (result.port ? `:${result.port}` : '')\n\n  return result\n}\n\nfunction parseUrlBase (url: string, base?: string) {\n  const VALID_URL = /^(https?:)\\/\\//i\n\n  let fullUrl = ''\n  let parsedBase: ReturnType<typeof parseUrl> | null = null\n\n  if (!isUndefined(base)) {\n    base = String(base).trim()\n    if (!VALID_URL.test(base)) throw new TypeError(`Failed to construct 'URL': Invalid base URL`)\n    parsedBase = parseUrl(base)\n  }\n\n  url = String(url).trim()\n\n  if (VALID_URL.test(url)) {\n    fullUrl = url\n  } else if (parsedBase) {\n    if (url) {\n      if (url.startsWith('//')) {\n        fullUrl = parsedBase.protocol + url\n      } else {\n        fullUrl = parsedBase.origin + (url.startsWith('/') ? url : `/${url}`)\n      }\n    } else {\n      fullUrl = parsedBase.href\n    }\n  } else {\n    throw new TypeError(`Failed to construct 'URL': Invalid URL`)\n  }\n\n  return parseUrl(fullUrl)\n}\n"],"mappings":"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"}