{"version":3,"file":"root.js","names":["root: TaroRootElement","dataPathArr: string[]","currentData: any","customWrapper: Record<string, any> | undefined","fn: TFunc","payload: UpdatePayload","prerender?: TFunc","data: Record<string, UpdatePayloadValue | ReturnType<HydratedData>>","customWrapperMap: Map<Record<any, any>, Record<string, any>>","data","ctx","cb: TFunc","ctx?: Record<string, any>"],"sources":["../../src/dom/root.ts"],"sourcesContent":["import { hooks, isArray, isFunction, isUndefined, Shortcuts } from '@tarojs/shared'\n\nimport {\n  CUSTOM_WRAPPER,\n  PAGE_INIT,\n  ROOT_STR,\n  SET_DATA\n} from '../constants'\nimport { options } from '../options'\nimport { perf } from '../perf'\nimport { customWrapperCache, isComment } from '../utils'\nimport { TaroElement } from './element'\n\nimport type { HydratedData, MpInstance, TFunc, UpdatePayload, UpdatePayloadValue } from '../interface'\n\nfunction findCustomWrapper (root: TaroRootElement, dataPathArr: string[]) {\n  // ['root', 'cn', '[0]'] remove 'root' => ['cn', '[0]']\n  const list = dataPathArr.slice(1)\n  let currentData: any = root\n  let customWrapper: Record<string, any> | undefined\n  let splitedPath = ''\n\n  list.some((item, i) => {\n    const key = item\n      // '[0]' => '0'\n      .replace(/^\\[(.+)\\]$/, '$1')\n      // 'cn' => 'childNodes'\n      .replace(/\\bcn\\b/g, 'childNodes')\n\n    currentData = currentData[key]\n\n    if (isArray(currentData)) {\n      currentData = currentData.filter(el => !isComment(el))\n    }\n\n    if (isUndefined(currentData)) return true\n\n    if (currentData.nodeName === CUSTOM_WRAPPER) {\n      const res = customWrapperCache.get(currentData.sid)\n      if (res) {\n        customWrapper = res\n        splitedPath = dataPathArr.slice(i + 2).join('.')\n      }\n    }\n  })\n\n  if (customWrapper) {\n    return {\n      customWrapper,\n      splitedPath\n    }\n  }\n}\n\nexport class TaroRootElement extends TaroElement {\n  private updatePayloads: UpdatePayload[] = []\n\n  private updateCallbacks: TFunc[] = []\n\n  public pendingUpdate = false\n\n  public ctx: null | MpInstance = null\n\n  public constructor () {\n    super()\n    this.nodeName = ROOT_STR\n    this.tagName = ROOT_STR.toUpperCase()\n  }\n\n  public get _path (): string {\n    return ROOT_STR\n  }\n\n  public get _root (): TaroRootElement {\n    return this\n  }\n\n  public scheduleTask(fn: TFunc) {\n    // 这里若使用微任务可略微提前setData的执行时机，但在部分场景下可能会出现连续setData两次，造成更大的性能问题\n    setTimeout(fn)\n  }\n\n  public enqueueUpdate (payload: UpdatePayload): void {\n    this.updatePayloads.push(payload)\n\n    if (!this.pendingUpdate && this.ctx) {\n      this.performUpdate()\n    }\n  }\n\n  public performUpdate (initRender = false, prerender?: TFunc) {\n    this.pendingUpdate = true\n\n    const ctx = hooks.call('proxyToRaw', this.ctx)!\n\n    this.scheduleTask(() => {\n      const setDataMark = `${SET_DATA} 开始时间戳 ${Date.now()}`\n      perf.start(setDataMark)\n      const data: Record<string, UpdatePayloadValue | ReturnType<HydratedData>> = Object.create(null)\n      const resetPaths = new Set<string>(\n        initRender\n          ? ['root.cn.[0]', 'root.cn[0]']\n          : []\n      )\n\n      while (this.updatePayloads.length > 0) {\n        const { path, value } = this.updatePayloads.shift()!\n        if (path.endsWith(Shortcuts.Childnodes)) {\n          resetPaths.add(path)\n        }\n        data[path] = value\n      }\n\n      for (const path in data) {\n        resetPaths.forEach(p => {\n          // 已经重置了数组，就不需要分别再设置了\n          if (path.includes(p) && path !== p) {\n            delete data[path]\n          }\n        })\n\n        const value = data[path]\n        if (isFunction(value)) {\n          data[path] = value()\n        }\n      }\n\n      // 预渲染\n      if (isFunction(prerender)) return prerender(data)\n\n      // 正常渲染\n      this.pendingUpdate = false\n      let normalUpdate = {}\n      const customWrapperMap: Map<Record<any, any>, Record<string, any>> = new Map()\n\n      if (initRender) {\n        // 初次渲染，使用页面级别的 setData\n        normalUpdate = data\n      } else {\n        // 更新渲染，区分 CustomWrapper 与页面级别的 setData\n        for (const p in data) {\n          const dataPathArr = p.split('.')\n          const found = findCustomWrapper(this, dataPathArr)\n          if (found) {\n            // 此项数据使用 CustomWrapper 去更新\n            const { customWrapper, splitedPath } = found\n            // 合并同一个 customWrapper 的相关更新到一次 setData 中\n            customWrapperMap.set(customWrapper, {\n              ...(customWrapperMap.get(customWrapper) || {}),\n              [`i.${splitedPath}`]: data[p]\n            })\n          } else {\n            // 此项数据使用页面去更新\n            normalUpdate[p] = data[p]\n          }\n        }\n      }\n\n      const customWrapperCount = customWrapperMap.size\n      const isNeedNormalUpdate = Object.keys(normalUpdate).length > 0\n      const updateArrLen = customWrapperCount + (isNeedNormalUpdate ? 1 : 0)\n      let executeTime = 0\n\n      const cb = () => {\n        if (++executeTime === updateArrLen) {\n          perf.stop(setDataMark)\n          this.flushUpdateCallback()\n          initRender && perf.stop(PAGE_INIT)\n        }\n      }\n\n      // custom-wrapper setData\n      if (customWrapperCount) {\n        customWrapperMap.forEach((data, ctx) => {\n          if (process.env.NODE_ENV !== 'production' && options.debug) {\n            // eslint-disable-next-line no-console\n            console.log('custom wrapper setData: ', data)\n          }\n          ctx.setData(data, cb)\n        })\n      }\n\n      // page setData\n      if (isNeedNormalUpdate) {\n        if (process.env.NODE_ENV !== 'production' && options.debug) {\n          // eslint-disable-next-line no-console\n          console.log('page setData:', normalUpdate)\n        }\n        ctx.setData(normalUpdate, cb)\n      }\n    })\n  }\n\n  public enqueueUpdateCallback (cb: TFunc, ctx?: Record<string, any>) {\n    this.updateCallbacks.push(() => {\n      ctx ? cb.call(ctx) : cb()\n    })\n  }\n\n  public flushUpdateCallback () {\n    const updateCallbacks = this.updateCallbacks\n    if (!updateCallbacks.length) return\n\n    const copies = updateCallbacks.slice(0)\n    this.updateCallbacks.length = 0\n    for (let i = 0; i < copies.length; i++) {\n      copies[i]()\n    }\n  }\n}\n"],"mappings":"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"}